// Code generated by vfsgen; DO NOT EDIT.

package flux

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-values.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-values.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 694,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\xdd\x6e\xdb\x30\x0c\x85\xef\xf5\x14\x04\x76\x57\x6c\xee\x0f\xd6\x61\xf0\x5d\xb7\x8b\xa0\x58\x83\x0e\x29\xf6\x00\x0c\x7d\x1c\x0b\x95\x2c\x8f\x92\x80\x65\x41\xdf\x7d\xb0\x94\x25\x69\x72\x27\x9e\x43\x9a\x3f\x9f\x15\x31\x64\x15\xc4\xd6\x10\x29\x7e\x67\xc4\x54\xde\x44\x32\xe5\x96\xee\x6f\x7c\x09\x3c\x7c\xd0\x6d\x4b\x5f\x3e\x2f\xad\x31\x03\x9c\x7f\x9e\xa0\x9c\x82\xce\xc9\xa2\xe0\x84\x96\x7a\x76\x11\xc6\x6c\x6c\x9a\xd5\xac\xae\xa5\xdd\x8e\x9a\x85\x4d\xbf\x56\x4f\xf4\xf6\x66\x88\xd6\xca\xa3\x0c\x07\xfd\x5b\x09\xab\x35\x71\x3a\x1a\x3f\x39\x0d\xb1\xea\x0a\xee\xc2\xe8\xb6\x07\x6f\x05\xee\x9e\x47\xb7\xad\x76\x8e\xd0\x63\x9f\x08\xad\xb2\xe3\x35\x8e\xfd\x9f\xe6\xa8\x1a\x62\x5f\x5e\xed\xd4\x52\xd2\x0c\x63\x76\xbb\x4f\x64\x7b\x6a\x1e\x44\x57\xd8\xd8\x98\xb4\x7c\x56\xf7\xef\x79\x0f\xfc\x11\x97\x3b\x3c\x7a\xde\xa0\x25\x7e\x8d\x8a\x29\xc4\x86\xff\x66\x85\x68\x63\xc3\xf5\xd5\x47\x2f\xda\x78\x2b\x1a\x62\xe8\x53\x23\xc1\x5f\x5f\xd1\x07\x7a\xec\xe9\xe1\xc7\x8b\x21\x62\xd1\x7a\x54\x8c\xbc\x76\xe8\xea\x5c\x67\x3d\xe7\x51\x30\x76\xf3\xd3\x78\x78\x61\x19\xd0\x55\x2e\x27\x90\x88\x9c\xf5\xf6\x3f\xa4\x3d\xa6\xdb\x9b\x3d\xa7\x13\x52\x77\x5f\x97\xb6\x68\xef\xb1\x9e\x81\x3d\x16\xdc\xdf\xde\xcd\x6c\x27\x0d\x1e\x69\x40\x2e\xf9\x87\x79\xeb\xb5\x3c\x8f\xb6\x47\x4c\x0b\x8c\x33\x7d\x1b\xc6\xba\xc9\xf2\x42\x2f\x5b\xc4\xed\x28\x0b\xd6\x35\x6f\xf0\x3d\x38\x07\x29\x15\xe6\xec\x0c\x17\x19\xa5\x56\x5c\x8e\x09\xba\x0a\x0e\xa7\xbf\x58\x99\xe3\x5f\x00\x00\x00\xff\xff\xf3\xb3\x81\xce\xb6\x02\x00\x00"),
		},
		"/helm-operator-values.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "helm-operator-values.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 218,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8e\xbd\x4e\xc5\x30\x0c\x85\x77\x3f\x85\x5f\xe0\x22\x06\x60\xc8\x0a\x03\x0b\x0c\x0c\xec\x21\x3d\xdc\x44\x4a\x9a\xe0\x1f\x44\x55\xf5\xdd\x51\x0b\xdd\xec\xef\x93\x7d\x8e\x40\xbb\x4b\x82\x06\x62\x16\x7c\x39\xd4\x8e\x99\x39\x0d\x0f\x7c\x7f\xdb\x8e\xa5\xa1\x75\x59\x02\x3f\xdc\xbd\x14\x22\x1f\x53\x34\x3c\xe6\x28\xf6\x84\xa1\x81\x4d\x1c\x44\x19\xb5\xed\xb7\xdf\x10\x2d\x7d\xd6\xc0\xeb\xca\x37\xcf\xa8\xed\xfd\x9f\xf0\xb6\x11\x0d\xe9\x0d\x96\xe1\x47\x10\xe6\xf8\x51\x31\x9d\x3f\x52\x75\x35\xc8\x5b\xaf\xd8\x6d\x12\x44\xc3\x29\xaf\xc5\x76\xa8\x9a\xff\x2a\x2a\x92\xc0\x5e\x63\x43\xe0\xcf\xea\x3f\x97\x6b\xb1\xcb\x84\x51\xfb\x42\xbf\x01\x00\x00\xff\xff\xf9\x0c\x8a\xc5\xda\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-values.yaml.tmpl"].(os.FileInfo),
		fs["/helm-operator-values.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
