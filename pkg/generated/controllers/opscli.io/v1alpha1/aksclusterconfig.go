/*
Copyright 2020 github.com/181192.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/181192/ops-cli/pkg/apis/opscli.io/v1alpha1"
	clientset "github.com/181192/ops-cli/pkg/generated/clientset/versioned/typed/opscli.io/v1alpha1"
	informers "github.com/181192/ops-cli/pkg/generated/informers/externalversions/opscli.io/v1alpha1"
	listers "github.com/181192/ops-cli/pkg/generated/listers/opscli.io/v1alpha1"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type AKSClusterConfigHandler func(string, *v1alpha1.AKSClusterConfig) (*v1alpha1.AKSClusterConfig, error)

type AKSClusterConfigController interface {
	generic.ControllerMeta
	AKSClusterConfigClient

	OnChange(ctx context.Context, name string, sync AKSClusterConfigHandler)
	OnRemove(ctx context.Context, name string, sync AKSClusterConfigHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() AKSClusterConfigCache
}

type AKSClusterConfigClient interface {
	Create(*v1alpha1.AKSClusterConfig) (*v1alpha1.AKSClusterConfig, error)
	Update(*v1alpha1.AKSClusterConfig) (*v1alpha1.AKSClusterConfig, error)

	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1alpha1.AKSClusterConfig, error)
	List(opts metav1.ListOptions) (*v1alpha1.AKSClusterConfigList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AKSClusterConfig, err error)
}

type AKSClusterConfigCache interface {
	Get(name string) (*v1alpha1.AKSClusterConfig, error)
	List(selector labels.Selector) ([]*v1alpha1.AKSClusterConfig, error)

	AddIndexer(indexName string, indexer AKSClusterConfigIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.AKSClusterConfig, error)
}

type AKSClusterConfigIndexer func(obj *v1alpha1.AKSClusterConfig) ([]string, error)

type aKSClusterConfigController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.AKSClusterConfigsGetter
	informer          informers.AKSClusterConfigInformer
	gvk               schema.GroupVersionKind
}

func NewAKSClusterConfigController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.AKSClusterConfigsGetter, informer informers.AKSClusterConfigInformer) AKSClusterConfigController {
	return &aKSClusterConfigController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromAKSClusterConfigHandlerToHandler(sync AKSClusterConfigHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.AKSClusterConfig
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.AKSClusterConfig))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *aKSClusterConfigController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.AKSClusterConfig))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateAKSClusterConfigDeepCopyOnChange(client AKSClusterConfigClient, obj *v1alpha1.AKSClusterConfig, handler func(obj *v1alpha1.AKSClusterConfig) (*v1alpha1.AKSClusterConfig, error)) (*v1alpha1.AKSClusterConfig, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *aKSClusterConfigController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *aKSClusterConfigController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *aKSClusterConfigController) OnChange(ctx context.Context, name string, sync AKSClusterConfigHandler) {
	c.AddGenericHandler(ctx, name, FromAKSClusterConfigHandlerToHandler(sync))
}

func (c *aKSClusterConfigController) OnRemove(ctx context.Context, name string, sync AKSClusterConfigHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromAKSClusterConfigHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *aKSClusterConfigController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), "", name)
}

func (c *aKSClusterConfigController) EnqueueAfter(name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), "", name, duration)
}

func (c *aKSClusterConfigController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *aKSClusterConfigController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *aKSClusterConfigController) Cache() AKSClusterConfigCache {
	return &aKSClusterConfigCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *aKSClusterConfigController) Create(obj *v1alpha1.AKSClusterConfig) (*v1alpha1.AKSClusterConfig, error) {
	return c.clientGetter.AKSClusterConfigs().Create(obj)
}

func (c *aKSClusterConfigController) Update(obj *v1alpha1.AKSClusterConfig) (*v1alpha1.AKSClusterConfig, error) {
	return c.clientGetter.AKSClusterConfigs().Update(obj)
}

func (c *aKSClusterConfigController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.AKSClusterConfigs().Delete(name, options)
}

func (c *aKSClusterConfigController) Get(name string, options metav1.GetOptions) (*v1alpha1.AKSClusterConfig, error) {
	return c.clientGetter.AKSClusterConfigs().Get(name, options)
}

func (c *aKSClusterConfigController) List(opts metav1.ListOptions) (*v1alpha1.AKSClusterConfigList, error) {
	return c.clientGetter.AKSClusterConfigs().List(opts)
}

func (c *aKSClusterConfigController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.AKSClusterConfigs().Watch(opts)
}

func (c *aKSClusterConfigController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AKSClusterConfig, err error) {
	return c.clientGetter.AKSClusterConfigs().Patch(name, pt, data, subresources...)
}

type aKSClusterConfigCache struct {
	lister  listers.AKSClusterConfigLister
	indexer cache.Indexer
}

func (c *aKSClusterConfigCache) Get(name string) (*v1alpha1.AKSClusterConfig, error) {
	return c.lister.Get(name)
}

func (c *aKSClusterConfigCache) List(selector labels.Selector) ([]*v1alpha1.AKSClusterConfig, error) {
	return c.lister.List(selector)
}

func (c *aKSClusterConfigCache) AddIndexer(indexName string, indexer AKSClusterConfigIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.AKSClusterConfig))
		},
	}))
}

func (c *aKSClusterConfigCache) GetByIndex(indexName, key string) (result []*v1alpha1.AKSClusterConfig, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.AKSClusterConfig))
	}
	return result, nil
}
